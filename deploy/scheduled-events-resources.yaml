AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Visitor Sign-In App Scheduled Events Resources'

Parameters:
  AppName:
    Type: String
    Default: visitor-sign-in-app
    Description: Name of the application
  
  EnvironmentName:
    Type: String
    Default: production
    Description: Environment name (e.g., development, staging, production)
  
  DatabaseSecurityGroupId:
    Type: String
    Description: Security Group ID of the RDS database to allow Lambda functions to connect
  
  CreateCloudWatchAlarms:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Whether to create CloudWatch alarms for monitoring

Resources:
  # EventBridge IAM Role
  EventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEventBridgeFullAccess
      Policies:
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt EventGeneratorFunction.Arn

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: RDSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds:DescribeDBInstances
                  - rds:DescribeDBClusters
                Resource: '*'
        - PolicyName: VPCAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSubnets
                  - ec2:DescribeVpcs
                Resource: '*'

  # CloudWatch Log Group
  EventsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AppName}-${EnvironmentName}-event-generator'
      RetentionInDays: 30

  # Event Generator Lambda Function
  EventGeneratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AppName}-${EnvironmentName}-event-generator'
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs18.x
      Timeout: 60
      MemorySize: 256
      Environment:
        Variables:
          DATABASE_URL: !Sub '{{resolve:ssm:/aws/reference/secretsmanager/${AppName}-${EnvironmentName}-database-secret:SecretString:url}}'
          NODE_ENV: !Ref EnvironmentName
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log('Event Generator Lambda invoked');
            // This is a placeholder. The actual implementation will be deployed via CodePipeline.
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Event generation triggered successfully' })
            };
          };
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !ImportValue PrivateSubnet1
          - !ImportValue PrivateSubnet2

  # Lambda Security Group
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda functions to connect to RDS
      VpcId: !ImportValue VpcId
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # Allow Lambda to connect to RDS
  LambdaToRDSIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref DatabaseSecurityGroupId
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref LambdaSecurityGroup

  # EventBridge Rule for Daily Event Generation
  DailyEventGenerationRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${AppName}-${EnvironmentName}-daily-event-generation'
      Description: 'Runs daily to generate scheduled event instances'
      ScheduleExpression: 'cron(0 0 * * ? *)'
      State: ENABLED
      Targets:
        - Id: EventGeneratorFunctionTarget
          Arn: !GetAtt EventGeneratorFunction.Arn

  # Permission for EventBridge to invoke Lambda
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref EventGeneratorFunction
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt DailyEventGenerationRule.Arn

  # CloudWatch Alarm for Event Generation Failures (conditional)
  EventGenerationErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateAlarms
    Properties:
      AlarmName: !Sub '${AppName}-${EnvironmentName}-event-generation-errors'
      AlarmDescription: 'Alarm when event generation fails'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref EventGeneratorFunction
      TreatMissingData: notBreaching

  # CloudWatch Alarm for Event Generation Duration (conditional)
  EventGenerationDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateAlarms
    Properties:
      AlarmName: !Sub '${AppName}-${EnvironmentName}-event-generation-duration'
      AlarmDescription: 'Alarm when event generation takes too long'
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Maximum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 50000 # 50 seconds
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref EventGeneratorFunction
      TreatMissingData: notBreaching

Conditions:
  CreateAlarms: !Equals [!Ref CreateCloudWatchAlarms, 'true']

Outputs:
  LogGroupName:
    Description: Name of the CloudWatch Log Group
    Value: !Ref EventsLogGroup

  EventBridgeRoleArn:
    Description: ARN of the EventBridge IAM Role
    Value: !GetAtt EventBridgeRole.Arn

  LambdaExecutionRoleArn:
    Description: ARN of the Lambda Execution IAM Role
    Value: !GetAtt LambdaExecutionRole.Arn

  EventGeneratorFunctionArn:
    Description: ARN of the Event Generator Lambda Function
    Value: !GetAtt EventGeneratorFunction.Arn